.panel {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 2%;
}

.panel__thumbnails {
  object-fit: cover;
  cursor: pointer;
  margin: 0 5px;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
}

.panel__thumbnails:hover,
.panel__thumbnails.active {
  box-shadow: 0 0 10px 0px black;
}

.carousel {
  position: relative;
  left: 25vw;
  height: 70vh;
  width: 50vw;
}

.carousel__slide {
  display: flex;
  height: 100%;
  position: absolute;

  transition-property: transform;
  transition-duration: 500ms;
  transition-timing-function: cubic-bezier(
    0.43,
    0.06,
    0.66,
    0.99
  ); /*~ ease-in-out  slow start and end  */
}

.carousel__img {
  height: 100%;
  width: 50vw;
  object-fit: cover;

  transition: opacity 500ms,
    transform 500ms cubic-bezier(0.43, 0.06, 0.66, 0.99);
  opacity: 0.5;
  transform: scale(0.7);
}

.carousel__img.active {
  opacity: 1;
  transform: scale(1);
}

.button__arrow {
  font-size: 1.3rem;
  padding: 5px 10px 7px;
  color: #d3d1d1;
}

.button__arrow:hover {
  color: rgb(157, 173, 160);
}

.button__hide {
  visibility: hidden;
  font-size: 1.3rem;
  padding: 5px 10px 7px;
}

@media only screen and (max-width: 600px) {
  .carousel {
    left: 20vw;
    width: 60vw;
  }
  .carousel__img {
    width: 60vw;
    height: 50vh;
  }

  .panel__thumbnails {
    margin: auto 1.5px;
    width: 5vw;
    height: 5vw;
  }
}

/* 
CSS transitions allows you to change property values smoothly, over a given duration.

Css transitions work any time a css property changes, 
i.e. The transition effect will start when the specified CSS property (e.g. width) changes value.
even if it was because the class changed (e.g. change of property among a & a:hover)

.carousel__slide {
  transform: `translateX(-${(activeImgIndex / photoData.length) * 100}%)`
  transition: transform 500ms cubic-bezier(0.43, 0.06, 0.66, 0.99);
}
transform property change trigger the tranisition
*/
